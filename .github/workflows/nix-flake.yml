name: "Nix Flake"
on:
  pull_request:
    branches:
  push:
    branches:
jobs:
  nix-build:
    strategy:
      fail-fast: false
      matrix:
        os:
        - ubuntu-latest
        #- ubuntu-24.04-arm
    name: Nix Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    permissions:
      contents: read
      id-token: write
      actions: write
    steps:
      - uses: actions/checkout@v4
      - uses: wimpysworld/nothing-but-nix@main
        with:
          hatchet-protocol: 'rampage'
          nix-permission-edict: true

      - uses: nixbuild/nix-quick-install-action@v32

      - name: Restore and save Nix store
        uses: nix-community/cache-nix-action@v6
        with:
          # restore and save a cache using this key
          primary-key: nix-build-${{ runner.os }}-${{ hashFiles('**/*.nix', '**/flake.lock') }}
          # if there's no cache hit, restore a cache by this prefix
          restore-prefixes-first-match: nix-build-${{ runner.os }}-
          # collect garbage until the Nix store size (in bytes) is at most this number
          # before trying to save a new cache
          # 1G = 1073741824
          gc-max-store-size-linux: 3G
          # do purge caches
          purge: true
          # purge all versions of the cache
          purge-prefixes: nix-build-${{ runner.os }}-
          # created more than this number of seconds ago
          purge-created: 0
          # or, last accessed more than this number of seconds ago
          # relative to the start of the `Post Restore and save Nix store` phase
          purge-last-accessed: 0
          # except any version with the key that is the same as the `primary-key`
          purge-primary-key: never

      # - name: "Check `nix flake show`"
      #   run: nix flake show --allow-import-from-derivation

      - run: nix build

      - run: nix flake check

  nix-develop:
    # needs: nix-build
    strategy:
      fail-fast: false
      matrix:
        os:
        - ubuntu-latest
        #- ubuntu-24.04-arm
    name: Nix Develop Shell on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    permissions:
      contents: read
      id-token: write
      actions: write
    steps:
      - uses: actions/checkout@v4
      - uses: wimpysworld/nothing-but-nix@main
        with:
          hatchet-protocol: 'rampage'
          nix-permission-edict: true

      - uses: nixbuild/nix-quick-install-action@v32

      - name: Restore and save Nix store
        uses: nix-community/cache-nix-action@v6
        with:
          # restore and save a cache using this key
          primary-key: nix-develop-shell-${{ runner.os }}-${{ hashFiles('**/*.nix', '**/flake.lock') }}
          # if there's no cache hit, restore a cache by this prefix
          restore-prefixes-first-match: nix-develop-shell-${{ runner.os }}-
          # collect garbage until the Nix store size (in bytes) is at most this number
          # before trying to save a new cache
          # 1G = 1073741824
          gc-max-store-size-linux: 3G
          # do purge caches
          purge: true
          # purge all versions of the cache
          purge-prefixes: nix-develop-shell-${{ runner.os }}-
          # created more than this number of seconds ago
          purge-created: 0
          # or, last accessed more than this number of seconds ago
          # relative to the start of the `Post Restore and save Nix store` phase
          purge-last-accessed: 0
          # except any version with the key that is the same as the `primary-key`
          purge-primary-key: never

      - name: "Check `nix develop` shell can run command"
        run: nix develop --command "echo"
